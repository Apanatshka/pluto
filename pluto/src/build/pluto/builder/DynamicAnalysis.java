package build.pluto.builder;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import org.sugarj.common.Log;

import build.pluto.BuildUnit;
import build.pluto.BuildUnit.ModuleVisitor;
import build.pluto.dependency.BuildRequirement;
import build.pluto.dependency.DuplicateBuildUnitPathException;
import build.pluto.dependency.DuplicateFileGenerationException;
import build.pluto.dependency.FileRequirement;
import build.pluto.dependency.IllegalDependencyException;
import build.pluto.dependency.Requirement;
import build.pluto.output.Output;

import com.cedarsoftware.util.DeepEquals;

public class DynamicAnalysis {
  private Map<File, BuildUnit<?>> generatedFiles;
  private Map<Output, BuildUnit<?>> generatedOutput;

  public DynamicAnalysis() {
    this.generatedFiles = new HashMap<>();
    this.generatedOutput = new HashMap<>();
  }

  public void check(BuildUnit<?> unit, Integer inputHash) {
    checkInput(unit, inputHash);
    checkGeneratedFilesOverlap(unit);
    checkUnitDependency(unit);
    checkGeneratedOutputs(unit);
  }

  /**
   * The input may not have been changed during the build.
   */
  private void checkInput(BuildUnit<?> unit, Integer inputHash) throws AssertionError {
    if (inputHash != null && inputHash != DeepEquals.deepHashCode(unit.getGeneratedBy().input))
      throw new AssertionError("API Violation detected: Builder mutated its input.");
  }

  /**
   * The build unit must have a unique persistent path and may not
   * generated files previously generated by another build unit.
   */
  private void checkGeneratedFilesOverlap(BuildUnit<?> unit) {
    BuildUnit<?> other = generatedFiles.put(unit.getPersistentPath(), unit);
    if (other != null && other != unit)
      throw new DuplicateBuildUnitPathException("Build unit " + unit + " has same persistent path as build unit " + other);

    for (FileRequirement freq : unit.getGeneratedFileRequirements()) {
      other = generatedFiles.put(freq.file, unit);
      if (other != null && other != unit)
        throw new DuplicateFileGenerationException("Build unit " + unit + " generates same file as build unit " + other);
    }
  }

  /**
   * When a build unit A requires a file that was generated by a build unit B,
   * then build unit A must already have a build requirement on build unit B.
   */
  private void checkUnitDependency(BuildUnit<?> unit) {
    Set<BuildUnit<?>> requiredUnits = new HashSet<>();
    
    for (Requirement req : unit.getRequirements()) {
      if (req instanceof BuildRequirement<?>)
        requiredUnits.add(((BuildRequirement<?>) req).getUnit());
      else if (req instanceof FileRequirement) {
        File file = ((FileRequirement) req).file;
        if (file.exists()) {
          File dep = null;
          try {
            dep = BuildManager.xattr.getGenBy(file);
          } catch (IOException e) {
            Log.log.log("WARNING: Could not verify build-unit dependency due to exception \"" + e.getMessage() + "\" while reading metadata: " + file, Log.IMPORT);
          }
          if (dep != null) {
            boolean foundDep = unit.visit(new IsConnectedTo(dep), requiredUnits);
            if (!foundDep)
              throw new IllegalDependencyException(dep, 
                  "Build unit " + unit.getPersistentPath() + " has a hidden dependency on file " + file 
                + " without build-unit dependency on " + dep + ", which generated this file. "
                + "The builder " + unit.getGeneratedBy().createBuilder().description() + " should "
                + "mark a dependency to " + dep + " by `requiring` the corresponding builder.");
          }
        }
      }
    }
  }
  
  /**
   * A builder must declare build requirements on all builders whose
   * outputs it uses (including outputs provided via the build input).
   */
  private void checkGeneratedOutputs(BuildUnit<?> unit) {
    if (unit.getBuildResult() != null)
      generatedOutput.put(unit.getBuildResult(), unit);
  }
  
  
  
  
  private static class IsConnectedTo implements ModuleVisitor<Boolean> {
    private final File requiredUnit;
    
    public IsConnectedTo(File requiredUnit) {
      this.requiredUnit = Objects.requireNonNull(requiredUnit);
    }
    
    @Override
    public Boolean visit(BuildUnit<?> mod) {
      return requiredUnit.equals(mod.getPersistentPath());
    }

    @Override
    public Boolean combine(Boolean t1, Boolean t2) {
      return t1 || t2;
    }

    @Override
    public Boolean init() {
      return false;
    }

    @Override
    public boolean cancel(Boolean t) {
      return t;
    }
  }
}
